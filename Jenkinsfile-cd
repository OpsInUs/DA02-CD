pipeline {
    agent any
    parameters {
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-admin-server')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-api-gateway')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-config-server')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-customers-service')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-discovery-server')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-genai-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-vets-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-visits-service')
    }
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-token')
        HELM_RELEASE_NAME = 'petclinic'
        HELM_REPO_NAME = 'DA02-HelmRepo'
        HELM_REPO_URL = 'https://github.com/OpsInUs/DA02-HelmRepo'
        HELM_CHART = 'spring-petclinic-microservices'
        DOCKER_REGISTRY = 'vuhoabinhthachhoa'
    }
    stages {
        stage('Add Helm Repository') {
            steps {
                sh """
                helm repo add ${HELM_REPO_NAME} ${HELM_REPO_URL}
                helm repo update
                """
            }
        }
        stage('Authenticate with Docker Hub') {
            steps {
                sh 'echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('Pull and Deploy Images') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    script {
                        def services = [
                            'admin-server': params.ADMIN_SERVER_BRANCH,
                            'api-gateway': params.API_GATEWAY_BRANCH,
                            'config-server': params.CONFIG_SERVER_BRANCH,
                            'customers-service': params.CUSTOMERS_SERVICE_BRANCH,
                            'discovery-server': params.DISCOVERY_SERVER_BRANCH,
                            'genai-service': params.GENAI_SERVICE_BRANCH,
                            'vets-service': params.VETS_SERVICE_BRANCH,
                            'visits-service': params.VISITS_SERVICE_BRANCH
                        ]
                        def helmSet = ''
                        def updatedServices = []

                        // Iterate over services and process only non-main branches
                        services.each { serviceName, branch ->
                            if (branch != 'main') {
                                def commitHash = sh(script: "git ls-remote https://github.com/spring-petclinic/spring-petclinic-microservices ${branch} | head -1 | cut -f1", returnStdout: true).trim()
                                if (!commitHash) {
                                    error "Branch ${branch} not found for ${serviceName}."
                                }
                                def tag = commitHash.substring(0, 7) // Short SHA
                                def fullImageName = "spring-petclinic-${serviceName}"
                                sh "docker pull ${DOCKER_REGISTRY}/${fullImageName}:${tag}"
                                // Update Helm set command for repository, tag, and type
                                helmSet += "services.${serviceName}.image.repository=${fullImageName},services.${serviceName}.image.tag=${tag},services.${serviceName}.spec.type=NodePort,"
                                updatedServices << serviceName
                            }
                        }

                        // Deploy only if there are services to update
                        if (!helmSet.isEmpty()) {
                            helmSet = helmSet.substring(0, helmSet.length() - 1) // Remove trailing comma
                            helmSet += ",global.namespace=dev-review"
                            sh """
                            helm upgrade --install $HELM_RELEASE_NAME ${HELM_REPO_NAME}/${HELM_CHART} \
                                --set ${helmSet} \
                                --namespace dev-review \
                                --kubeconfig=\$KUBECONFIG \
                                --kube-context gke_thanh-devops_us-central1-a_petclinic
                            """
                        } else {
                            echo "No services with non-main branches to deploy."
                        }

                        // Provide NodePort information after deployment
                        if (!updatedServices.isEmpty()) {
                            echo "Deployment completed. Use the following NodePort endpoints to test:"
                            updatedServices.each { service ->
                                def nodePort = sh(script: "kubectl get service ${service} -n dev-review -o jsonpath='{.spec.ports[0].nodePort}' --kubeconfig=\$KUBECONFIG", returnStdout: true).trim()
                                if (nodePort) {
                                    def nodeIp = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}' --kubeconfig=\$KUBECONFIG", returnStdout: true).trim()
                                    if (!nodeIp) {
                                        nodeIp = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}' --kubeconfig=\$KUBECONFIG", returnStdout: true).trim()
                                    }
                                    if (nodeIp) {
                                        echo "Service: ${service} - Endpoint: ${nodeIp}:${nodePort}"
                                    } else {
                                        echo "Service: ${service} - No node IP available. Check GKE node configuration."
                                    }
                                } else {
                                    echo "Service: ${service} - Failed to assign NodePort. Ensure cluster allows dynamic NodePort allocation."
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout'
            sh "helm repo remove ${HELM_REPO_NAME} || true"
        }
    }
}
