pipeline {
    agent any // Ensure agent has gcloud, git, helm, kubectl, gke-gcloud-auth-plugin

    parameters {
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-admin-server')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-api-gateway')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-config-server')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-customers-service')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-discovery-server')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-genai-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-vets-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-visits-service')
    }

    environment {
        HELM_RELEASE_NAME         = 'petclinic'
        HELM_CHART_REPO_DIR_NAME  = 'DA02-HelmRepo'
        HELM_REPO_HTTPS_URL       = 'https://github.com/OpsInUs/DA02-HelmRepo.git'
        LOCAL_CHART_PATH          = "${env.HELM_CHART_REPO_DIR_NAME}"
        SERVICES_CD_REPO_URL      = 'https://github.com/OpsInUs/DA02-CD.git'
        DOCKER_REGISTRY_USERNAME  = 'vuhoabinhthachhoa'
        TARGET_NAMESPACE          = 'dev-review'
        JENKINS_HOST             = 'https://cda5-115-74-192-50.ngrok-free.app'
        TARGET_JOB_NAME          = 'clean-up-cd'
    }

    stages {
        stage('Clone Helm Chart Repository') {
            steps {
                echo "Cleaning up previous checkout of ${HELM_CHART_REPO_DIR_NAME}..."
                dir(HELM_CHART_REPO_DIR_NAME) {
                    deleteDir()
                }
                echo "Cloning Helm chart from ${HELM_REPO_HTTPS_URL} into ./${HELM_CHART_REPO_DIR_NAME}"
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: HELM_REPO_HTTPS_URL]],
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: HELM_CHART_REPO_DIR_NAME]]
                ])
                script {
                    sh "echo 'Contents of ./${HELM_CHART_REPO_DIR_NAME}:'; ls -la ./${HELM_CHART_REPO_DIR_NAME}"
                    sh "echo 'Verifying chart at ./${LOCAL_CHART_PATH}'"
                    sh "if [ -d './${LOCAL_CHART_PATH}' ] && [ -f './${LOCAL_CHART_PATH}/Chart.yaml' ]; then echo 'Chart found at ./${LOCAL_CHART_PATH}'; else echo 'ERROR: Chart not found at ./${LOCAL_CHART_PATH}. Adjust LOCAL_CHART_PATH and Git repo structure.'; exit 1; fi"
                }
            }
        }

        stage('Deploy/Upgrade Petclinic with Helm') {
            steps {
                script {
                    if (!env.KUBECONFIG || !fileExists(env.KUBECONFIG)) {
                        error "KUBECONFIG is not set or file does not exist. Authentication stage might have failed."
                    }
                    echo "Using KUBECONFIG: ${env.KUBECONFIG} for Helm deployment."

                    sh """
                      if ! kubectl get namespace ${TARGET_NAMESPACE}; then
                        kubectl create namespace ${TARGET_NAMESPACE}
                      fi
                      kubectl label namespace ${TARGET_NAMESPACE} app.kubernetes.io/managed-by=Helm --overwrite
                      kubectl annotate namespace ${TARGET_NAMESPACE} \\
                        meta.helm.sh/release-name=${HELM_RELEASE_NAME} \\
                        meta.helm.sh/release-namespace=${TARGET_NAMESPACE} --overwrite
                    """

                    try {
                        def servicesToUpdate = [
                            'admin-server': params.ADMIN_SERVER_BRANCH,
                            'api-gateway': params.API_GATEWAY_BRANCH,
                            'config-server': params.CONFIG_SERVER_BRANCH,
                            'customers-service': params.CUSTOMERS_SERVICE_BRANCH,
                            'discovery-server': params.DISCOVERY_SERVER_BRANCH,
                            'genai-service': params.GENAI_SERVICE_BRANCH,
                            'vets-service': params.VETS_SERVICE_BRANCH,
                            'visits-service': params.VISITS_SERVICE_BRANCH
                        ]
                        def helmSetArgs = []
                        def servicesWithNodePort = []

                        // First add base image paths for ALL services
                        servicesToUpdate.each { serviceName, branch ->
                            def imageName = "spring-petclinic-${serviceName}"
                            helmSetArgs.add("--set services.\"${serviceName}\".image.repository=docker.io/${DOCKER_REGISTRY_USERNAME}/${imageName}")
                            
                            if (branch != 'main' && branch.trim() != '') {
                                echo "Processing ${serviceName} with branch ${branch}"
                                def commitHash = sh(script: "git ls-remote ${SERVICES_CD_REPO_URL} refs/heads/${branch} | head -1 | cut -f1", returnStdout: true).trim()
                                if (!commitHash) {
                                    error "Failed to get commit hash for branch '${branch}' of service '${serviceName}'"
                                }
                                def tag = commitHash.substring(0, 7)
                                helmSetArgs.add("--set services.\"${serviceName}\".image.tag=${tag}")
                                helmSetArgs.add("--set services.\"${serviceName}\".serviceType=NodePort")
                                servicesWithNodePort.add(serviceName)
                            } else {
                                helmSetArgs.add("--set services.\"${serviceName}\".image.tag=latest")
                            }
                        }
                        
                        helmSetArgs.add("--set global.namespace=${TARGET_NAMESPACE}")

                        dir("./${LOCAL_CHART_PATH}") {
                            sh "helm dependency update"
                        }

                        def helmCommand = "helm upgrade --install ${HELM_RELEASE_NAME} ./${LOCAL_CHART_PATH} --namespace ${TARGET_NAMESPACE} --debug ${helmSetArgs.join(' ')}"
                        sh helmCommand

                        // Verification steps
                        echo "Verifying deployment..."
                        sh 'sleep 30'
                        sh "helm status ${HELM_RELEASE_NAME} -n ${TARGET_NAMESPACE}"
                        sh "kubectl get deployments,services,pods -n ${TARGET_NAMESPACE} -l app.kubernetes.io/instance=${HELM_RELEASE_NAME}"

                        if (!servicesWithNodePort.isEmpty()) {
                            echo "Services with NodePort: ${servicesWithNodePort.join(', ')}"
                            servicesWithNodePort.each { service ->
                                def nodePort = sh(script: "kubectl get service ${service} -n ${TARGET_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                                if (nodePort?.isNumber()) {
                                    def nodeIp = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}'", returnStdout: true).trim() ?:
                                                sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}'", returnStdout: true).trim()
                                    if (nodeIp) {
                                        echo "âœ… ${service} NodePort: http://${nodeIp}:${nodePort}"
                                    }
                                }
                            }
                        }

                    } catch (Exception e) {
                        error "Deployment failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Display Job Trigger Link') {
            steps {
                script {
                    echo "Cleanup job: ${JENKINS_HOST}/job/${TARGET_JOB_NAME}/build"
                }
            }
        }
    }

    post {
        always {
            dir(HELM_CHART_REPO_DIR_NAME) {
                deleteDir()
            }
        }
    }
}
