pipeline {
    agent any
    parameters {
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-admin-server')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-api-gateway')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-config-server')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-customers-service')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-discovery-server')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-genai-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-vets-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-visits-service')
    }
    environment {
        HELM_RELEASE_NAME = 'petclinic'
        HELM_CHART_DIR_NAME = 'DA02-HelmRepo'
        HELM_REPO_HTTPS_URL = 'https://github.com/OpsInUs/DA02-HelmRepo.git'
        DOCKER_REGISTRY_USERNAME = 'vuhoabinhthachhoa'
        KUBE_CONTEXT = 'gke_thanh-devops_us-central1-a_petclinic'
        TARGET_NAMESPACE = 'dev-review'
    }
    stages {
       stage('Clone Helm Repository via HTTPS') { // Stage name updated for clarity
        steps {
            checkout([
                $class: 'GitSCM',
                branches: [[name: '*/main']], // Or the specific branch of your Helm repo
                userRemoteConfigs: [[url: HELM_REPO_HTTPS_URL]], // Only the URL is needed
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: HELM_CHART_DIR_NAME]]
            ])
         }
        }

        stage('Verify Tools') {
            steps {
                sh 'echo $PATH'
                sh 'which gcloud'
                sh 'which git'
                sh 'which helm'
                sh 'which docker'
                sh 'which kubectl'
                sh 'which gke-gcloud-auth-plugin'
            }
        }

        stage ("getting the WIF config file into a variable")
        {
            steps {
                     withCredentials([file(credentialsId: 'wif-config-file', variable: 'WIF')]) 
                        {
                         sh '''
                            gcloud auth login --brief --cred-file=$WIF --quiet
                            gcloud container clusters list
                            gcloud compute instances list
                            '''

                        }
                }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    script {
                        sh 'cat $KUBECONFIG' // Debug: Check the content
                        sh 'kubectl version --kubeconfig=$KUBECONFIG' // Test kubectl authentication

                        def servicesToUpdate = [
                            'admin-server': params.ADMIN_SERVER_BRANCH,
                            'api-gateway': params.API_GATEWAY_BRANCH,
                            'config-server': params.CONFIG_SERVER_BRANCH,
                            'customers-service': params.CUSTOMERS_SERVICE_BRANCH,
                            'discovery-server': params.DISCOVERY_SERVER_BRANCH,
                            'genai-service': params.GENAI_SERVICE_BRANCH,
                            'vets-service': params.VETS_SERVICE_BRANCH,
                            'visits-service': params.VISITS_SERVICE_BRANCH
                        ]
                        def helmSetArgs = []
                        def servicesWithNodePort = [] // To track which services were set to NodePort

                        servicesToUpdate.each { serviceName, branch ->
                            if (branch != 'main') {
                                echo "Processing ${serviceName} with branch ${branch}"
                                
                                def commitHashCmd = "git ls-remote https://github.com/OpsInUs/DA02-CD refs/heads/${branch} | head -1 | cut -f1"
                                def commitHash = sh(script: commitHashCmd, returnStdout: true).trim()

                                if (!commitHash) {
                                    error "Failed to get commit hash for branch '${branch}' for service '${serviceName}'. Branch might not exist or repo is private."
                                }
                                def tag = commitHash.substring(0, 7)
                                def imageName = "spring-petclinic-${serviceName}" 
                                
                                helmSetArgs.add("--set services.${serviceName}.image.repository=${DOCKER_REGISTRY_USERNAME}/${imageName}")
                                helmSetArgs.add("--set services.${serviceName}.image.tag=${tag}")
                                
                                if (serviceName == 'vets-service') { 
                                    helmSetArgs.add("--set services.${serviceName}.serviceType=NodePort")
                                    servicesWithNodePort.add(serviceName)
                                }
                            }
                        }
                        
                        def chartPath = "./${HELM_CHART_DIR_NAME}" 
                        // Always set global namespace if deploying. If no specific branches, this will apply namespace to default deployment.
                        helmSetArgs.add("--set global.namespace=${TARGET_NAMESPACE}")
                        if (helmSetArgs.size() == 1 && helmSetArgs[0] == "--set global.namespace=${TARGET_NAMESPACE}") { // Only namespace arg means no specific service updates
                             echo "No specific service branches provided. Deploying with chart defaults for namespace ${TARGET_NAMESPACE}."
                        }
                        
                        sh "helm dependency update ${chartPath}"

                        def helmCommand = "helm upgrade --install ${HELM_RELEASE_NAME} ${chartPath} --namespace ${TARGET_NAMESPACE} --kubeconfig=\$KUBECONFIG --kube-context ${KUBE_CONTEXT}"
                        if (!helmSetArgs.isEmpty()) {
                            helmCommand += " " + helmSetArgs.join(" ")
                        }
                        
                        sh helmCommand

                        if (!servicesWithNodePort.isEmpty()) {
                            echo "Deployment completed. For services set to NodePort, use the following endpoints to test:"
                            servicesWithNodePort.each { service ->
                                // Assuming service port 8083 for vets-service for specific NodePort lookup.
                                // For a generic solution, you'd need to know each service's port.
                                def servicePortForJsonPath = (service == 'vets-service') ? "8083" : "" 
                                def nodePortJsonPath = ""
                                if (servicePortForJsonPath) {
                                    nodePortJsonPath = "{.spec.ports[?(@.port==${servicePortForJsonPath})].nodePort}"
                                } else {
                                    nodePortJsonPath = "{.spec.ports[0].nodePort}" // Fallback if service port isn't specifically known
                                }


                                def nodePort = sh(script: "kubectl get service ${service} -n ${TARGET_NAMESPACE} -o jsonpath='${nodePortJsonPath}' --kubeconfig=\$KUBECONFIG --kube-context ${KUBE_CONTEXT}", returnStdout: true).trim()
                                if (nodePort) {
                                    def nodeIp = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}' --kubeconfig=\$KUBECONFIG --kube-context ${KUBE_CONTEXT}", returnStdout: true).trim()
                                    if (!nodeIp) {
                                        nodeIp = sh(script: "kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}' --kubeconfig=\$KUBECONFIG --kube-context ${KUBE_CONTEXT}", returnStdout: true).trim()
                                    }
                                    if (nodeIp) {
                                        echo "Service: ${service} - Endpoint: http://${nodeIp}:${nodePort}"
                                    } else {
                                        echo "Service: ${service} - NodePort ${nodePort}. No node IP available. Check GKE node configuration."
                                    }
                                } else {
                                    echo "Service: ${service} - Failed to get NodePort. Ensure chart sets type to NodePort and cluster allows dynamic NodePort allocation."
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            dir(HELM_CHART_DIR_NAME) { 
                sh "echo 'Cleaning up ${HELM_CHART_DIR_NAME}' && rm -rf ." 
            }
        }
    }
}
